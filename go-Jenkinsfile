pipeline {
    agent any

    parameters{
        string(name: 'DOCKER_IMAGE', defaultValue: 'maylinch99/jordi-kubecamp-go', description: 'Docker image name')
        string(name: 'TAG', defaultValue: 'latest', description: 'version name')
        string(name: 'CREDENTIALS', defaultValue: 'jordi.dockerhub', description: 'DockerHub credentials')
    }
    

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner'  // Ejecuta el an√°lisis de SonarQube
                }
            }
        } 
       stage('Build Docker Image') {
            steps {
                dir('services/go-auth'){
                    script {
                    // Construye la imagen de Docker
                        app = docker.build("${params.DOCKER_IMAGE}:${params.TAG}", "-f ./Dockerfile  .")
                    }                    
                }
            }
        }
    
        stage('Test') {
            steps {
                dir('services/go-auth'){
                    script{
                        def dockerfileTest ="Dockerfile.test"
                        testApp = docker.build("${params.DOCKER_IMAGE}:test", "-f ${dockerfileTest} .")

                        testApp.run()

                    }
                }


            }
            
        }
        stage('Push image') {
            steps{

                dir('services/go-auth'){
                    script{
                        withCredentials([usernamePassword(credentialsId: 'jordi.docker', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
                            // assumes Jib is configured to use the environment variables
                            sh "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PWD}"
                            app.push()
                        }
                    }
                }
            }
        }
        
    }
}